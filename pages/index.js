import styles from 'styles/pages/Home.module.scss'

import React, { useEffect, useState } from 'react'
import dayjs from 'dayjs'
import Head from 'next/head'
import { Cards, DateOptions, Section, TagsHorizontal } from 'features/home'
import { BottomNav, TabsNav, TopNav } from 'components'
import { constantFormatDate, constantTab } from 'helpers/constants'
import { tabsNavRouteList } from 'helpers/routesConstant'
import { useSelector } from 'react-redux'
import { getPosts } from 'helpers/actions/apis'
import { faHome, faSlidersH } from '@fortawesome/free-solid-svg-icons'

const Home = () => {
  const { posts, date, tab } = useSelector((state) => {
    const posts = getPosts(state.dataStorage.posts)
    return { ...state, posts }
  })

  const [activeType, setActiveType] = useState('like')
  const [values, setValues] = useState([])

  const handleTag = (e, activePage) => {
    setActiveType(activePage)
  }

  useEffect(() => {
    const valuesFilter = filterList(posts, date)
    setValues(valuesFilter)
  }, [posts.length, date])

  return (
    <>
      <TopNav title={'All Report'} leftIcon={faHome} rightIcon={faSlidersH} />
      <div className={styles.container}>
        <Head>
          <title>Jenosize Test 1</title>
          <meta name='description' content='Generated by create next app' />
          <link rel='icon' href='/favicon.ico' />
        </Head>

        <TabsNav border className={styles.tabsStyled} dataSource={tabsNavRouteList} />
        <DateOptions />

        <main className={styles.main}>
          {tab === constantTab.daily ? (
            <Cards dataSource={values[0]} />
          ) : (
            <React.Fragment>
              <TagsHorizontal onClick={handleTag} activeName={activeType} />
              <Section data={values} activeType={activeType} />
            </React.Fragment>
          )}
        </main>
      </div>
      <BottomNav />
    </>
  )
}

export default Home

const filterList = (data, date) => {
  const { start, end } = Array.isArray(date) ? { start: date[0], end: date[1] } : { start: date, end: date }
  return data.filter((item) => {
    const update_date = dayjs(item.update_date).format(constantFormatDate.default)
    return update_date >= start && update_date <= end
  })
}
