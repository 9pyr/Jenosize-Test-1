import styles from 'styles/Home.module.scss'

import Head from 'next/head'
import { TabsNav } from 'components'
import { Cards, DateOptions, Section, TagsHorizontal } from 'features/home'
import { tabsNavRouteList } from 'helpers/routesConstant'

import dataMock from '__mock/dataMock'
import React, { useState } from 'react'
import { useSelector } from 'react-redux'
import { constantTab } from 'helpers/constants'

const sortCountList = (data, activePage) => {
  const fieldCount = `count_${activePage}s`
  return data.sort((a, b) => new Date(b.update_date).getTime() - new Date(a.update_date).getTime() && b[fieldCount] - a[fieldCount])
}
export default function Home() {
  const store = useSelector((state) => state)

  const [activeType, setActiveType] = useState('like')
  const [values, setValues] = useState(sortCountList(posts, activeType))

  const handleTag = (e, activePage) => {
    setActiveType(activePage)

    setValues(sortCountList(posts, activePage))
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Jenosize Test 1</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <TabsNav border className={styles.tabsStyled} dataSource={tabsNavRouteList} />
      <DateOptions />

      <main className={styles.main}>
        {store.tab === constantTab.daily ? (
          <Cards dataSource={sumCountData} />
        ) : (
          <React.Fragment>
            <TagsHorizontal onClick={handleTag} activeName={activeType} />
            <Section data={values} activeType={activeType} />
          </React.Fragment>
        )}
      </main>
    </div>
  )
}
const { posts } = dataMock
const sumCountData = posts.reduce((prev, cur, index) => {
  if (index === 1) {
    return {
      countLike: prev.count_likes + cur.count_likes,
      countComment: prev.count_comments + cur.count_comments,
      countPoint: prev.count_points + cur.count_points,
      countDiamond: prev.count_diamonds + cur.count_diamonds,
    }
  } else {
    return {
      countLike: prev.countLike + cur.count_likes,
      countComment: prev.countComment + cur.count_likes,
      countPoint: prev.countPoint + cur.count_likes,
      countDiamond: prev.countDiamond + cur.count_likes,
    }
  }
})
